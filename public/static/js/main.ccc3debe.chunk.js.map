{"version":3,"sources":["assets/images/logo.png","api/ajax.js","api/index.js","utils/memoryUtils.js","utils/storageUtils.js","pages/login/login.jsx","config/menuConfig.js","components/left-nav/index.jsx","utils/dateUtils.js","config/menuList.js","components/link-button/index.jsx","components/header/index.jsx","pages/home/home.jsx","pages/category/add-form.jsx","pages/category/update-form.jsx","pages/category/category.jsx","utils/constants.js","pages/product/home.jsx","pages/product/pictures-wall.jsx","pages/product/rich-text-editor.jsx","pages/product/add-update.jsx","pages/product/detail.jsx","pages/product/product.jsx","pages/role/add-form.jsx","pages/role/auth-form.jsx","pages/role/role.jsx","pages/user/user-form.jsx","pages/user/user.jsx","pages/charts/bar.jsx","pages/charts/line.jsx","pages/charts/pie.jsx","pages/not-found/not-found.jsx","pages/order/order.jsx","pages/admin/admin.jsx","App.js","index.js"],"names":["module","exports","ajax","url","data","type","Promise","resolve","reject","axios","get","params","post","then","response","catch","error","message","reqLogin","username","password","reqCategorys","parentId","reqAddCategory","categoryName","reqUpdateCategory","categoryId","reqCategory","reqProducts","pageNum","pageSize","reqUpdateStatus","productId","status","reqSearchProducts","searchName","searchType","reqDeleteImg","name","reqAddOrUpdateProduct","product","_id","reqRoles","reqAddRole","roleName","reqUpdateRole","role","reqUsers","reqDeleteUser","userId","reqAddOrUpdateUser","user","reqWeather","city","jsonp","err","console","log","results","weather_data","dayPictureUrl","weather","saveUser","store","set","getUser","removeUser","remove","Login","handleSubmit","event","preventDefault","props","form","validateFields","values","a","result","success","memoryUtils","storageUtils","history","replace","msg","this","validatePwd","rule","value","callback","length","test","to","getFieldDecorator","className","src","logo","alt","onSubmit","Item","rules","required","whitespace","min","max","pattern","prefix","style","color","placeholder","validator","htmlType","Component","WrapLogin","create","menuList","title","key","icon","isPublic","children","SubMenu","LeftNav","hasAuth","item","menus","indexOf","find","child","getMenuNodes_map","map","getMenuNodes","path","location","pathname","reduce","pre","cItem","openKey","push","menuNodes","mode","theme","selectedKeys","defaultOpenKeys","withRouter","formateDate","time","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","LinkButton","Header","state","currentTime","getTime","intervalId","setInterval","now","setState","getWeather","getTitle","forEach","logout","confirm","content","onOk","clearInterval","onClick","Home","Option","AddForm","setForm","categorys","initialValue","UpdateForm","Category","loading","subCategorys","parentName","showStatus","initColumns","columns","dataIndex","width","render","category","showUpdate","showSubCategorys","getCategorys","showCategorys","handleCancel","resetFields","showAdd","addCategory","updateCategory","marginRight","extra","bordered","rowKey","dataSource","pagination","defaultPageSize","showQuickJumper","visible","onCancel","PAGE_SIZE","BASE_IMG_URL","ProductHome","total","products","price","newStatus","updateStatus","getProducts","list","onChange","margin","target","current","PicturesWall","previewVisible","previewImage","fileList","getImgs","file","handlePreview","thumbUrl","handleChange","imgs","img","index","uid","uploadButton","action","accept","listType","onPreview","footer","React","RichTextEditor","editorState","EditorState","createEmpty","onEditorStateChange","getDetail","draftToHtml","convertToRaw","getCurrentContent","uploadImageCallBack","xhr","XMLHttpRequest","open","FormData","append","send","addEventListener","JSON","parse","responseText","link","html","detail","contentBlock","htmlToDraft","contentState","ContentState","createFromBlockArray","contentBlocks","createWithContent","editorStyle","border","minHeight","paddingLeft","toolbar","image","uploadCallback","present","mandatory","TextArea","ProductAddUpdate","options","initOptions","c","label","isLeaf","isUpdate","pCategoryId","childOptions","option","validatePrice","loadData","selectedOptions","targetOption","submit","desc","categoryIds","pw","editor","goBack","createRef","fontSize","labelCol","span","wrapperCol","autosize","minRows","maxRows","addonAfter","ref","PureComponent","ProductDetail","cName1","cName2","all","dangerouslySetInnerHTML","__html","Product","component","exact","TreeNode","AuthForm","getMenus","checkedKeys","getTreeNodes","onCheck","treeNodes","nextProps","disabled","checkable","defaultExpandAll","Role","roles","isShowAdd","isShowAuth","initColumn","create_time","getRoles","onRow","addRole","updateRole","auth","auth_time","auth_name","role_id","rowSelection","selectedRowKeys","onSelect","UserForm","phone","email","User","users","isShow","roleNames","deleteUser","initRoleNames","getUsers","addOrUpdateUser","getFieldsValue","Bar","Line","Pie","NotFound","Order","Footer","Sider","Content","Admin","backgroundColor","from","textAlign","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ccc3debe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ba1f87ec.png\";","/*\r\n能发送异步ajax请求的函数模块\r\n封装axios库\r\n函数的返回值是promise对象\r\n1. 优化1: 统一处理请求异常?\r\n    在外层包一个自己创建的promise对象\r\n    在请求出错时, 不reject(error), 而是显示错误提示\r\n2. 优化2: 异步得到不是reponse, 而是response.data\r\n   在请求成功resolve时: resolve(response.data)\r\n */\r\n\r\nimport axios from 'axios'\r\nimport {message} from 'antd'\r\n\r\nexport default function ajax(url, data={}, type='GET') {\r\n\r\n  return new Promise((resolve, reject) => {\r\n    let promise\r\n    // 1. 执行异步ajax请求\r\n    if(type==='GET') { // 发GET请求\r\n      promise = axios.get(url, { // 配置对象\r\n        params: data // 指定请求参数\r\n      })\r\n    } else { // 发POST请求\r\n      promise = axios.post(url, data)\r\n    }\r\n    // 2. 如果成功了, 调用resolve(value)\r\n    promise.then(response => {\r\n      resolve(response.data)\r\n    // 3. 如果失败了, 不调用reject(reason), 而是提示异常信息\r\n    }).catch(error => {\r\n      // reject(error)\r\n      message.error('请求出错了: ' + error.message)\r\n    })\r\n  })\r\n\r\n\r\n}\r\n\r\n// 请求登陆接口\r\n// ajax('/login', {username: 'Tom', passsword: '12345'}, 'POST').then()\r\n// 添加用户\r\n// ajax('/manage/user/add', {username: 'Tom', passsword: '12345', phone: '13712341234'}, 'POST').then()\r\n","/*\r\n要求: 能根据接口文档定义接口请求\r\n包含应用中所有接口请求函数的模块\r\n每个函数的返回值都是promise\r\n\r\n基本要求: 能根据接口文档定义接口请求函数\r\n */\r\nimport jsonp from 'jsonp'\r\nimport {message} from 'antd'\r\nimport ajax from './ajax'\r\n\r\n// const BASE = 'http://localhost:5000'\r\nconst BASE = ''\r\n// 登陆\r\n/*\r\nexport function reqLogin(username, password) {\r\n  return ajax('/login', {username, password}, 'POST')\r\n}*/\r\nexport const reqLogin = (username, password) => ajax(BASE + '/login', {username, password}, 'POST')\r\n\r\n// 获取一级/二级分类的列表\r\nexport const reqCategorys = (parentId) => ajax(BASE + '/manage/category/list', {parentId})\r\n\r\n// 添加分类\r\nexport const reqAddCategory = (categoryName, parentId) => ajax(BASE + '/manage/category/add', {categoryName, parentId}, 'POST')\r\n\r\n// 更新分类\r\nexport const reqUpdateCategory = ({categoryId, categoryName}) => ajax(BASE + '/manage/category/update', {categoryId, categoryName}, 'POST')\r\n\r\n// 获取一个分类\r\nexport const reqCategory = (categoryId) => ajax(BASE + '/manage/category/info', {categoryId})\r\n\r\n// 获取商品分页列表\r\nexport const reqProducts = (pageNum, pageSize) => ajax(BASE + '/manage/product/list', {pageNum, pageSize})\r\n\r\n// 更新商品的状态(上架/下架)\r\nexport const reqUpdateStatus = (productId, status) => ajax(BASE + '/manage/product/updateStatus', {productId, status}, 'POST')\r\n\r\n\r\n\r\n/*\r\n搜索商品分页列表 (根据商品名称/商品描述)\r\nsearchType: 搜索的类型, productName/productDesc\r\n */\r\nexport const reqSearchProducts = ({pageNum, pageSize, searchName, searchType}) => ajax(BASE + '/manage/product/search', {\r\n  pageNum,\r\n  pageSize,\r\n  [searchType]: searchName,\r\n})\r\n\r\n// 搜索商品分页列表 (根据商品描述)\r\n/*export const reqSearchProducts2 = ({pageNum, pageSize, searchName}) => ajax(BASE + '/manage/product/search', {\r\n  pageNum,\r\n  pageSize,\r\n  productDesc: searchName,\r\n})*/\r\n\r\n// 删除指定名称的图片\r\nexport const reqDeleteImg = (name) => ajax(BASE + '/manage/img/delete', {name}, 'POST')\r\n\r\n// 添加/修改商品\r\nexport const reqAddOrUpdateProduct = (product) => ajax(BASE + '/manage/product/' + ( product._id?'update':'add'), product, 'POST')\r\n// 修改商品\r\n// export const reqUpdateProduct = (product) => ajax(BASE + '/manage/product/update', product, 'POST')\r\n\r\n\r\n// 获取所有角色的列表\r\nexport const reqRoles = () => ajax(BASE + '/manage/role/list')\r\n// 添加角色\r\nexport const reqAddRole = (roleName) => ajax(BASE + '/manage/role/add', {roleName}, 'POST')\r\n// 添加角色\r\nexport const reqUpdateRole = (role) => ajax(BASE + '/manage/role/update', role, 'POST')\r\n\r\n\r\n// 获取所有用户的列表\r\nexport const reqUsers = () => ajax(BASE + '/manage/user/list')\r\n// 删除指定用户\r\nexport const reqDeleteUser = (userId) => ajax(BASE + '/manage/user/delete', {userId}, 'POST')\r\n// 添加/更新用户\r\nexport const reqAddOrUpdateUser = (user) => ajax(BASE + '/manage/user/'+(user._id ? 'update' : 'add'), user, 'POST')\r\n\r\n/*\r\njson请求的接口请求函数\r\n */\r\nexport const reqWeather = (city) => {\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const url = `http://api.map.baidu.com/telematics/v3/weather?location=${city}&output=json&ak=3p49MVra6urFRGOT9s8UBWr2`\r\n    // 发送jsonp请求\r\n    jsonp(url, {}, (err, data) => {\r\n      console.log('jsonp()', err, data)\r\n      // 如果成功了\r\n      if (!err && data.status==='success') {\r\n        // 取出需要的数据\r\n        const {dayPictureUrl, weather} = data.results[0].weather_data[0]\r\n        resolve({dayPictureUrl, weather})\r\n      } else {\r\n        // 如果失败了\r\n        message.error('获取天气信息失败!')\r\n      }\r\n\r\n    })\r\n  })\r\n}\r\n// reqWeather('北京')\r\n/*\r\njsonp解决ajax跨域的原理\r\n  1). jsonp只能解决GET类型的ajax请求跨域问题\r\n  2). jsonp请求不是ajax请求, 而是一般的get请求\r\n  3). 基本原理\r\n   浏览器端:\r\n      动态生成<script>来请求后台接口(src就是接口的url)\r\n      定义好用于接收响应数据的函数(fn), 并将函数名通过请求参数提交给后台(如: callback=fn)\r\n   服务器端:\r\n      接收到请求处理产生结果数据后, 返回一个函数调用的js代码, 并将结果数据作为实参传入函数调用\r\n   浏览器端:\r\n      收到响应自动执行函数调用的js代码, 也就执行了提前定义好的回调函数, 并得到了需要的结果数据\r\n */","/*\r\n用来在内存保存一些数据的工具模块\r\n */\r\nexport default {\r\n  user: {}, // 保存当前登陆的user\r\n}","/*\r\n进行local数据存储管理的工具模块\r\n */\r\nimport store from 'store'\r\nconst USER_KEY = 'user_key'\r\nexport default {\r\n  /*\r\n  保存user\r\n   */\r\n  saveUser (user) {\r\n    // localStorage.setItem(USER_KEY, JSON.stringify(user))\r\n    store.set(USER_KEY, user)\r\n  },\r\n\r\n  /*\r\n  读取user\r\n   */\r\n  getUser () {\r\n    // return JSON.parse(localStorage.getItem(USER_KEY) || '{}')\r\n    return store.get(USER_KEY) || {}\r\n  },\r\n\r\n  /*\r\n  删除user\r\n   */\r\n  removeUser () {\r\n    // localStorage.removeItem(USER_KEY)\r\n    store.remove(USER_KEY)\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './login.less'\r\nimport logo from '../../assets/images/logo.png'\r\nimport { Form, Icon, Input, Button,message} from 'antd';\r\nimport {Redirect} from 'react-router-dom'\r\nimport {reqLogin} from '../../api'\r\nimport memoryUtils from '../../utils/memoryUtils'\r\nimport storageUtils from '../../utils/storageUtils'\r\n//登陆的路由\r\n class Login extends Component {\r\n \r\n  //提交表单的数据 方法\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // //得到form对象\r\n    // const form =this.props.form\r\n    // //获取表单输入的数据\r\n    // const values = form.getFieldsValue()\r\n    // console.log('submit',values)\r\n\r\n    //对所有的表单字段进行校验\r\n    this.props.form.validateFields(async(err, values) => {\r\n      //校验成功\r\n      if (!err) {\r\n        console.log('提交登陆的ajax请求',values)\r\n        const{username, password}=values\r\n\r\n        // reqLogin(username, password).then(response => {\r\n        //   console.log('成功了', response.data)\r\n        // }).catch(error => {\r\n        //   console.log('失败了', error)\r\n        // })\r\n    \r\n        //syanc和await处理,await等待返回的最后结果，\r\n        //syanc放在最近的函数，用try,catch来处理失败和成功\r\n        //可简化promise的使用,不用再使用then()来指定成功或者失败的回调函数\r\n        //以同步编码（没有回调函数了）方式实现异步流程。\r\n        try {\r\n          const result = await reqLogin(username, password)\r\n          console.log(\"result\",result.data,\"result\")\r\n          // let result = response.data  \r\n          if(result.status ===0){\r\n            //登陆成功\r\n            message.success('登陆成功')\r\n\r\n    //保存user用户的信息\r\n            const user = result.data\r\n            memoryUtils.user =user //保存到内存中\r\n    //保存user数据到本地，只要不去手动删除就一直存在\r\n            storageUtils.saveUser(user)\r\n\r\n            //跳转到管理界面   \r\n            //因为不需要再回退到登陆页面 用replace（替代），如果需要回退的话用push,它是一成一成叠加上去的\r\n            this.props.history.replace('/')\r\n          }else{\r\n            //登陆失败\r\n            message.error(result.msg)\r\n          }\r\n        }catch(error){\r\n          console.log('请求出错',error)\r\n        }\r\n\r\n      }else{\r\n        console.log('校验失败')\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  //对密码验证\r\n  validatePwd = (rule, value, callback) => {\r\n    console.log('pwd()',rule,value)\r\n    if(!value){\r\n     callback('请输入密码')\r\n    }else if(value.length<4){\r\n      callback('密码长度不能小于4位')\r\n    }else if(value.length>12){\r\n      callback('密码长度不能大于12位')\r\n    }else if (!/^[a-zA-Z0-9_]+$/.test(value)){\r\n      callback('密码必须是英文，数字下划线组成')//验证通过\r\n    }else{\r\n      callback()//验证通过\r\n    }\r\n    //  callback(\"xxxx\")//验证不通过\r\n  }\r\n\r\nrender(){  \r\n\r\n  //如果用户已经登陆，自动跳转到管理页面\r\n  const user = memoryUtils.user\r\n  if(user && user._id) {\r\n    return <Redirect to='/'/>\r\n  }\r\n  \r\n  //得到具强大功能的form对象\r\n  const form =this.props.form\r\n  const { getFieldDecorator } = form;\r\n  return (\r\n    <div className=\"login\">\r\n        <header className=\"login-header\">\r\n            <img src={logo} alt=\"logo\"/>\r\n            <h1>React项目： 后台管理系统</h1>\r\n        </header>\r\n        <section className=\"login-content\">\r\n          <h2>用户登陆</h2>\r\n          <div>\r\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n            <Form.Item> \r\n              {\r\n                getFieldDecorator('username', {\r\n              rules: [\r\n                { required: true,whitespace: true, message: '用户名必须输入' },\r\n                { min: 4, message: '用户名至少4位' },\r\n                { max: 12, message: '用户名最多12位' },\r\n                { pattern: /^[a-zA-Z0-9_]+$/, message: '用户名必须是英文，数字下划线组成' },\r\n              ],\r\n              })\r\n              (\r\n                <Input\r\n                  prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"用户名\"\r\n                />,\r\n              )\r\n              }\r\n              </Form.Item> \r\n              <Form.Item>             \r\n              {\r\n                getFieldDecorator('password', {\r\n              rules: [\r\n                {\r\n                  validator: this.validatePwd\r\n                }\r\n               ]\r\n              })(\r\n                <Input\r\n                  prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  type=\"password\"\r\n                  placeholder=\"密码\"\r\n                />,\r\n              )\r\n              }\r\n              </Form.Item>\r\n              <Form.Item>\r\n                <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                  登陆\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </div>\r\n        </section>\r\n    </div>\r\n  )\r\n}\r\n}\r\n\r\n/**\r\n 1.高阶函数  \r\n    1). 一类特别的函数\r\n       a. 接受函数类型的参数\r\n       b. 返回值是函数\r\n    2). 常见\r\n       a. 定时器： setTimeout()/ setInterval()\r\n       b. Promise: Promise(()=>{}) then(value =>{},reason => {})\r\n       c. 数组遍历相关的方法：forEach()/filter()/map()/reduce()/find()/findIndex()\r\n       d.函数的对象bind()\r\n       e.Form.create()() / getFieldDecorator()()\r\n    3). 高阶函数更加有动态，更加具有狂展性\r\n 2.高阶组件\r\n    1). 本质就是一个函数\r\n    2).接收一个组件（被包装组件），返回一个新的组件（包装组件） 保证组件会向被包装组件传入特定属性\r\n    3). 作用： 扩展一个组件的功能\r\n    4).高阶组件也是高阶函数： 接收一个组件函数，返回是一个新的组件函数\r\n \r\n    */\r\n  \r\nconst WrapLogin = Form.create()(Login)\r\nexport default  WrapLogin\r\n/**\r\n 1.前台表单验证\r\n    1) 声明式实时表单验证：\r\n         getFieldDecorator('标识名称', {\r\n              rules: [\r\n                { required: true,whitespace: true, message: '用户名必须输入' },\r\n                { min: 4, message: '用户名至少4位' },\r\n                { max: 12, message: '用户名最多12位' },\r\n                { pattern: /^[a-zA-Z0-9_]+$/, message: '用户名必须是英文，数字下划线组成' },\r\n              ],\r\n              })\r\n    2) 自定义表单验证：\r\n           getFieldDecorator('password', {\r\n              rules: [\r\n                {\r\n                  validator: this.validatePwd\r\n                }\r\n               ]\r\n              })\r\n    3)  点击提示时统一验证\r\n             this.props.form.validateFields((err, values) => {\r\n                //校验成功\r\n                if (!err) {\r\n                  console.log('Received values of form: ', values);\r\n                  console.log('提交登陆的ajax请求',values)\r\n                }else{\r\n                  console.log('校验失败')\r\n                }\r\n              });\r\n 2.手机表单验证\r\n \r\n */","const menuList = [\r\n  {\r\n    title: '首页', // 菜单标题名称\r\n    key: '/home', // 对应的path\r\n    icon: 'home', // 图标名称\r\n    isPublic: true, // 公开的\r\n  },\r\n  {\r\n    title: '商品',\r\n    key: '/products',\r\n    icon: 'appstore',\r\n    children: [ // 子菜单列表\r\n      {\r\n        title: '品类管理',\r\n        key: '/category',\r\n        icon: 'bars'\r\n      },\r\n      {\r\n        title: '商品管理',\r\n        key: '/product',\r\n        icon: 'tool'\r\n      },\r\n    ]\r\n  },\r\n\r\n  {\r\n    title: '用户管理',\r\n    key: '/user',\r\n    icon: 'user'\r\n  },\r\n  {\r\n    title: '角色管理',\r\n    key: '/role',\r\n    icon: 'safety',\r\n  },\r\n\r\n  {\r\n    title: '图形图表',\r\n    key: '/charts',\r\n    icon: 'area-chart',\r\n    children: [\r\n      {\r\n        title: '柱形图',\r\n        key: '/charts/bar',\r\n        icon: 'bar-chart'\r\n      },\r\n      {\r\n        title: '折线图',\r\n        key: '/charts/line',\r\n        icon: 'line-chart'\r\n      },\r\n      {\r\n        title: '饼图',\r\n        key: '/charts/pie',\r\n        icon: 'pie-chart'\r\n      },\r\n    ]\r\n  },\r\n\r\n  {\r\n    title: '订单管理',\r\n    key: '/order',\r\n    icon: 'windows',\r\n  },\r\n]\r\n\r\nexport default menuList","import React, {Component} from 'react'\r\nimport {Link, withRouter} from 'react-router-dom'\r\nimport {Menu, Icon} from 'antd';\r\n\r\nimport logo from '../../assets/images/logo.png'\r\nimport menuList from '../../config/menuConfig'\r\nimport './index.less'\r\nimport memoryUtils from \"../../utils/memoryUtils\";\r\n\r\nconst SubMenu = Menu.SubMenu;\r\n\r\n/*\r\n左侧导航的组件\r\n */\r\nclass LeftNav extends Component {\r\n\r\n  /*\r\n  判断当前登陆用户对item是否有权限\r\n   */\r\n  hasAuth = (item) => {\r\n    const {key, isPublic} = item\r\n\r\n    const menus = memoryUtils.user.role.menus\r\n    const username = memoryUtils.user.username\r\n    /*\r\n    1. 如果当前用户是admin\r\n    2. 如果当前item是公开的\r\n    3. 当前用户有此item的权限: key有没有menus中\r\n     */\r\n    if(username==='admin' || isPublic || menus.indexOf(key)!==-1) {\r\n      return true\r\n    } else if(item.children){ // 4. 如果当前用户有此item的某个子item的权限\r\n      return !!item.children.find(child =>  menus.indexOf(child.key)!==-1)\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  /*\r\n  根据menu的数据数组生成对应的标签数组\r\n  使用map() + 递归调用\r\n  */\r\n  getMenuNodes_map = (menuList) => {\r\n    return menuList.map(item => {\r\n      /*\r\n        {\r\n          title: '首页', // 菜单标题名称\r\n          key: '/home', // 对应的path\r\n          icon: 'home', // 图标名称\r\n          children: [], // 可能有, 也可能没有\r\n        }\r\n\r\n        <Menu.Item key=\"/home\">\r\n          <Link to='/home'>\r\n            <Icon type=\"pie-chart\"/>\r\n            <span>首页</span>\r\n          </Link>\r\n        </Menu.Item>\r\n\r\n        <SubMenu\r\n          key=\"sub1\"\r\n          title={\r\n            <span>\r\n              <Icon type=\"mail\"/>\r\n              <span>商品</span>\r\n            </span>\r\n          }\r\n        >\r\n          <Menu.Item/>\r\n          <Menu.Item/>\r\n        </SubMenu>\r\n      */\r\n      if(!item.children) {\r\n        return (\r\n          <Menu.Item key={item.key}>\r\n            <Link to={item.key}>\r\n              <Icon type={item.icon}/>\r\n              <span>{item.title}</span>\r\n            </Link>\r\n          </Menu.Item>\r\n        )\r\n      } else {\r\n        return (\r\n          <SubMenu\r\n            key={item.key}\r\n            title={\r\n              <span>\r\n              <Icon type={item.icon}/>\r\n              <span>{item.title}</span>\r\n            </span>\r\n            }\r\n          >\r\n            {this.getMenuNodes(item.children)}\r\n          </SubMenu>\r\n        )\r\n      }\r\n\r\n    })\r\n  }\r\n\r\n  /*\r\n  根据menu的数据数组生成对应的标签数组\r\n  使用reduce() + 递归调用\r\n  */\r\n  getMenuNodes = (menuList) => {\r\n    // 得到当前请求的路由路径\r\n    const path = this.props.location.pathname\r\n\r\n    return menuList.reduce((pre, item) => {\r\n\r\n      // 如果当前用户有item对应的权限, 才需要显示对应的菜单项\r\n      if (this.hasAuth(item)) {\r\n        // 向pre添加<Menu.Item>\r\n        if(!item.children) {\r\n          pre.push((\r\n            <Menu.Item key={item.key}>\r\n              <Link to={item.key}>\r\n                <Icon type={item.icon}/>\r\n                <span>{item.title}</span>\r\n              </Link>\r\n            </Menu.Item>\r\n          ))\r\n        } else {\r\n\r\n          // 查找一个与当前请求路径匹配的子Item\r\n          const cItem = item.children.find(cItem => path.indexOf(cItem.key)===0)\r\n          // 如果存在, 说明当前item的子列表需要打开\r\n          if (cItem) {\r\n            this.openKey = item.key\r\n          }\r\n\r\n\r\n          // 向pre添加<SubMenu>\r\n          pre.push((\r\n            <SubMenu\r\n              key={item.key}\r\n              title={\r\n                <span>\r\n              <Icon type={item.icon}/>\r\n              <span>{item.title}</span>\r\n            </span>\r\n              }\r\n            >\r\n              {this.getMenuNodes(item.children)}\r\n            </SubMenu>\r\n          ))\r\n        }\r\n      }\r\n\r\n      return pre\r\n    }, [])\r\n  }\r\n\r\n  /*\r\n  在第一次render()之前执行一次\r\n  为第一个render()准备数据(必须同步的)\r\n   */\r\n  componentWillMount () {\r\n    this.menuNodes = this.getMenuNodes(menuList)\r\n  }\r\n\r\n  render() {\r\n    // debugger\r\n    // 得到当前请求的路由路径\r\n    let path = this.props.location.pathname\r\n    console.log('render()', path)\r\n    if(path.indexOf('/product')===0) { // 当前请求的是商品或其子路由界面\r\n      path = '/product'\r\n    }\r\n\r\n    // 得到需要打开菜单项的key\r\n    const openKey = this.openKey\r\n\r\n    return (\r\n      <div className=\"left-nav\">\r\n        <Link to='/' className=\"left-nav-header\">\r\n          <img src={logo} alt=\"logo\"/>\r\n          <h1>硅谷后台</h1>\r\n        </Link>\r\n\r\n        <Menu\r\n          mode=\"inline\"\r\n          theme=\"dark\"\r\n          selectedKeys={[path]}\r\n          defaultOpenKeys={[openKey]}\r\n        >\r\n\r\n          {\r\n            this.menuNodes\r\n          }\r\n\r\n        </Menu>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/*\r\nwithRouter高阶组件:\r\n包装非路由组件, 返回一个新的组件\r\n新的组件向非路由组件传递3个属性: history/location/match\r\n */\r\nexport default withRouter(LeftNav)","/*\r\n包含n个日期时间处理的工具函数模块\r\n*/\r\n\r\n/*\r\n  格式化日期\r\n*/\r\nexport function formateDate(time) {\r\n  if (!time) return ''\r\n  let date = new Date(time)\r\n  return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()\r\n    + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()\r\n}","//配置动态的路由数组嵌套对象孩子再嵌套对象的形式\r\nconst menuList =[\r\n    {\r\n        title: '首页',\r\n        key: '/home',\r\n        icon: 'home',\r\n    },\r\n    {\r\n        title: '商品',\r\n        key: '/products',\r\n        icon: 'appstore',\r\n        children:[\r\n            {\r\n                title: '品类管理',\r\n                key: '/category',\r\n                icon: 'bars',\r\n            },\r\n            {\r\n                title: '商品管理',\r\n                key: '/product',\r\n                icon: 'tool',\r\n            },\r\n        ]\r\n    },\r\n    {\r\n        title: '用户管理',\r\n        key: '/user',\r\n        icon: 'user'\r\n    },\r\n    {\r\n        title: '角色管理',\r\n        key: '/role',\r\n        icon: 'safety',\r\n    },\r\n    {\r\n        title: '图形图表',\r\n        key: '/charts',\r\n        icon: 'area-chart',\r\n        children: [\r\n          {\r\n            title: '柱形图',\r\n            key: '/charts/bar',\r\n            icon: 'bar-chart'\r\n          },\r\n          {\r\n            title: '折线图',\r\n            key: '/charts/line',\r\n            icon: 'line-chart'\r\n          },\r\n          {\r\n            title: '饼图',\r\n            key: '/charts/pie',\r\n            icon: 'pie-chart'\r\n          },\r\n        ]\r\n      },\r\n] \r\nexport default menuList","import React from 'react'\r\nimport './index.less'\r\n/*\r\n外形像链接的按钮\r\n */\r\nexport default function LinkButton(props) {\r\n  return <button {...props} className=\"link-button\"></button>\r\n}","import React, {Component} from 'react'\r\nimport {formateDate} from '../../utils/dateUtils'\r\nimport { Modal} from 'antd'\r\nimport memoryUtils from '../../utils/memoryUtils'\r\nimport storageUtils from '../../utils/storageUtils'\r\nimport {reqWeather} from '../../api'\r\nimport {withRouter} from 'react-router-dom'\r\nimport menuList from '../../config/menuList'\r\nimport LinkButton from '../link-button'\r\nimport './index.less'\r\n\r\n//顶部栏组件\r\n\r\n class Header extends Component {\r\n\r\n    state = {\r\n        currentTime:'' ,// 当前时间字符串\r\n        dayPictureUrl: '', // 天气图片url\r\n        weather: '', // 天气的文本\r\n    }\r\n\r\n\r\n    getTime= () =>{\r\n         // 每隔1s获取当前时间, 并更新状态数据currentTime\r\n      this.intervalId = setInterval(()=>{\r\n          const currentTime =formateDate (Date.now())\r\n          this.setState({currentTime})\r\n      }, 1000)\r\n    }\r\n\r\n    getWeather = async () => {\r\n        // 调用接口请求异步获取数据\r\n        const {dayPictureUrl, weather} = await reqWeather('北京')\r\n        // 更新状态\r\n        this.setState({dayPictureUrl, weather})\r\n      }\r\n\r\n\r\n      getTitle = () => {\r\n        // 得到当前请求路径\r\n        const path = this.props.location.pathname\r\n        let title\r\n        menuList.forEach(item => {\r\n          if (item.key===path) { // 如果当前item对象的key与path一样,item的title就是需要显示的title\r\n            title = item.title\r\n          } else if (item.children) {\r\n            // 在所有子item中查找匹配的\r\n            const cItem = item.children.find(cItem => path.indexOf(cItem.key)===0)\r\n            // 如果有值才说明有匹配的\r\n            if(cItem) {\r\n              // 取出它的title\r\n              title = cItem.title\r\n            }\r\n          }\r\n        })\r\n        return title\r\n      }\r\n\r\n  /*\r\n  退出登陆\r\n   */\r\n  logout = () => {\r\n    // 显示确认框\r\n    Modal.confirm({\r\n      content: '确定退出吗?',\r\n      onOk: () => {\r\n        console.log('OK', this)\r\n        // 删除保存的user数据\r\n        storageUtils.removeUser()\r\n        memoryUtils.user = {}\r\n\r\n        // 跳转到login\r\n        this.props.history.replace('/login')\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n      /*\r\n  第一次render()之后执行一次\r\n  一般在此执行异步操作: 发ajax请求/启动定时器\r\n   */\r\n  componentDidMount () {\r\n    // 获取当前的时间\r\n    this.getTime()\r\n    // 获取当前天气\r\n    this.getWeather()\r\n  }\r\n  /*\r\n  // 不能这么做: 不会更新显示\r\n  componentWillMount () {\r\n    this.title = this.getTitle()\r\n  }*/\r\n\r\n  /*\r\n  当前组件卸载之前调用\r\n   */\r\n  componentWillUnmount () {\r\n    // 清除定时器\r\n    clearInterval(this.intervalId)\r\n  }\r\n\r\n\r\n    render(){\r\n        \r\n    const username = memoryUtils.user.username\r\n\r\n    // 得到当前需要显示的title\r\n    const title = this.getTitle()\r\n        return(\r\n            <div className=\"header\">\r\n                <div className=\"header-top\">\r\n                    <span>欢迎,{username}</span>\r\n                    <LinkButton onClick={this.logout}>退出</LinkButton>\r\n                </div>\r\n                <div className=\"header-bottom\">\r\n                   <div className=\"header-bottom-left\">{title}</div>\r\n                   <div className=\"header-bottom-right\">\r\n                       <span>{this.state.currentTime}</span>\r\n                       <img src={this.state.dayPictureUrl} />\r\n                       <span>{this.state.weather}</span>\r\n                   </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Header)","import React, { Component } from 'react';\r\nimport './home.less'\r\n/*\r\n主页面\r\n*/\r\nexport default class Home extends Component {\r\nrender(){   \r\n  return (\r\n   <div className=\"home\">\r\n     欢迎来到管理系统\r\n    </div>\r\n  )\r\n}\r\n}\r\n","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Form,\r\n  Select,\r\n  Input\r\n} from 'antd'\r\n\r\nconst Item = Form.Item\r\nconst Option = Select.Option\r\n\r\n/*\r\n添加分类的form组件\r\n */\r\nclass AddForm extends Component {\r\n\r\n  static propTypes = {\r\n    setForm: PropTypes.func.isRequired, // 用来传递form对象的函数\r\n    categorys: PropTypes.array.isRequired, // 一级分类的数组\r\n    parentId: PropTypes.string.isRequired, // 父分类的ID\r\n  }\r\n\r\n  componentWillMount () {\r\n    this.props.setForm(this.props.form)\r\n  }\r\n\r\n  render() {\r\n    const {categorys, parentId} = this.props\r\n    const { getFieldDecorator } = this.props.form\r\n\r\n    return (\r\n      <Form>\r\n        <Item>\r\n          {\r\n            getFieldDecorator('parentId', {\r\n              initialValue: parentId\r\n            })(\r\n              <Select>\r\n                <Option value='0'>一级分类</Option>\r\n                {\r\n                  categorys.map((item,key) => <Option value={item._id}>{item.name}</Option>)\r\n                }\r\n              </Select>\r\n            )\r\n          }\r\n\r\n        </Item>\r\n\r\n        <Item>\r\n          {\r\n            getFieldDecorator('categoryName', {\r\n              initialValue: '',\r\n              rules: [\r\n                {required: true, message: '分类名称必须输入'}\r\n              ]\r\n            })(\r\n              <Input placeholder='请输入分类名称'/>\r\n            )\r\n          }\r\n        </Item>\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form.create()(AddForm)","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Form,\r\n  Input\r\n} from 'antd'\r\n\r\nconst Item = Form.Item\r\n\r\n/*\r\n更新分类的form组件\r\n */\r\nclass UpdateForm extends Component {\r\n\r\n  static propTypes = {\r\n    categoryName: PropTypes.string.isRequired,\r\n    setForm: PropTypes.func.isRequired\r\n  }\r\n\r\n  componentWillMount () {\r\n    // 将form对象通过setForm()传递父组件\r\n    this.props.setForm(this.props.form)\r\n  }\r\n\r\n  render() {\r\n\r\n    const {categoryName} = this.props\r\n    const { getFieldDecorator } = this.props.form\r\n\r\n    return (\r\n      <Form>\r\n        <Item>\r\n          {\r\n            getFieldDecorator('categoryName', {\r\n              initialValue: categoryName,\r\n              rules: [\r\n                {required: true, message: '分类名称必须输入'}\r\n              ]\r\n            })(\r\n              <Input placeholder='请输入分类名称'/>\r\n            )\r\n          }\r\n        </Item>\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form.create()(UpdateForm)","import React, {Component} from 'react'\r\nimport {\r\n  Card,\r\n  Table,\r\n  Button,\r\n  Icon,\r\n  message,\r\n  Modal\r\n} from 'antd'\r\n\r\nimport LinkButton from '../../components/link-button'\r\nimport {reqCategorys, reqUpdateCategory, reqAddCategory} from '../../api'\r\nimport AddForm from './add-form'\r\nimport UpdateForm from './update-form'\r\n\r\n/*\r\n商品分类路由\r\n */\r\nexport default class Category extends Component {\r\n\r\n  state = {\r\n    loading: false, // 是否正在获取数据中\r\n    categorys: [], // 一级分类列表\r\n    subCategorys: [], // 二级分类列表\r\n    parentId: '0', // 当前需要显示的分类列表的父分类ID\r\n    parentName: '', // 当前需要显示的分类列表的父分类名称\r\n    showStatus: 0, // 标识添加/更新的确认框是否显示, 0: 都不显示, 1: 显示添加, 2: 显示更新\r\n  }\r\n\r\n  /*\r\n  初始化Table所有列的数组\r\n   */\r\n  initColumns = () => {\r\n    this.columns = [\r\n      {\r\n        title: '分类的名称',\r\n        dataIndex: 'name', // 显示数据对应的属性名\r\n      },\r\n      {\r\n        title: '操作',\r\n        width: 300,\r\n        render: (category) => ( // 返回需要显示的界面标签\r\n          <span>\r\n            <LinkButton onClick={() => this.showUpdate(category)}>修改分类</LinkButton>\r\n            {/*如何向事件回调函数传递参数: 先定义一个匿名函数, 在函数调用处理的函数并传入数据*/}\r\n            {this.state.parentId==='0' ? <LinkButton onClick={() => this.showSubCategorys(category)}>查看子分类</LinkButton> : null}\r\n          </span>\r\n        )\r\n      }\r\n    ]\r\n  }\r\n\r\n  /*\r\n  异步获取一级/二级分类列表显示\r\n  parentId: 如果没有指定根据状态中的parentId请求, 如果指定了根据指定的请求\r\n   */\r\n  getCategorys = async (parentId) => {\r\n\r\n    // 在发请求前, 显示loading\r\n    this.setState({loading: true})\r\n    parentId = parentId || this.state.parentId\r\n    // 发异步ajax请求, 获取数据\r\n    const result = await reqCategorys(parentId)\r\n    // 在请求完成后, 隐藏loading\r\n    this.setState({loading: false})\r\n\r\n    if(result.status===0) {\r\n      // 取出分类数组(可能是一级也可能二级的)\r\n      const categorys = result.data\r\n      if(parentId==='0') {\r\n        // 更新一级分类状态\r\n        this.setState({\r\n          categorys\r\n        })\r\n        console.log('----', this.state.categorys.length)\r\n      } else {\r\n        // 更新二级分类状态\r\n        this.setState({\r\n          subCategorys: categorys\r\n        })\r\n      }\r\n    } else {\r\n      message.error('获取分类列表失败')\r\n    }\r\n  }\r\n\r\n  /*\r\n  显示指定一级分类对象的二子列表\r\n   */\r\n  showSubCategorys = (category) => {\r\n    // 更新状态\r\n    this.setState({\r\n      parentId: category._id,\r\n      parentName: category.name\r\n    }, () => { // 在状态更新且重新render()后执行\r\n      console.log('parentId', this.state.parentId) // '0'\r\n      // 获取二级分类列表显示\r\n      this.getCategorys()\r\n    })\r\n\r\n    // setState()不能立即获取最新的状态: 因为setState()是异步更新状态的\r\n    // console.log('parentId', this.state.parentId) // '0'\r\n  }\r\n\r\n  /*\r\n  显示指定一级分类列表\r\n   */\r\n  showCategorys = () => {\r\n    // 更新为显示一列表的状态\r\n    this.setState({\r\n      parentId: '0',\r\n      parentName: '',\r\n      subCategorys: []\r\n    })\r\n  }\r\n\r\n  /*\r\n  响应点击取消: 隐藏确定框\r\n   */\r\n  handleCancel = () => {\r\n    // 清除输入数据\r\n    this.form.resetFields()\r\n    // 隐藏确认框\r\n    this.setState({\r\n      showStatus: 0\r\n    })\r\n  }\r\n\r\n  /*\r\n  显示添加的确认框\r\n   */\r\n  showAdd = () => {\r\n    this.setState({\r\n      showStatus: 1\r\n    })\r\n  }\r\n\r\n  /*\r\n  添加分类\r\n   */\r\n  addCategory = () => {\r\n    this.form.validateFields(async (err, values) => {\r\n      if (!err) {\r\n        // 隐藏确认框\r\n        this.setState({\r\n          showStatus: 0\r\n        })\r\n\r\n        // 收集数据, 并提交添加分类的请求\r\n        const {parentId, categoryName} = values\r\n        // 清除输入数据\r\n        this.form.resetFields()\r\n        const result = await reqAddCategory(categoryName, parentId)\r\n        if(result.status===0) {\r\n\r\n          // 添加的分类就是当前分类列表下的分类\r\n          if(parentId===this.state.parentId) {\r\n            // 重新获取当前分类列表显示\r\n            this.getCategorys()\r\n          } else if (parentId==='0'){ // 在二级分类列表下添加一级分类, 重新获取一级分类列表, 但不需要显示一级列表\r\n            this.getCategorys('0')\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n\r\n  /*\r\n  显示修改的确认框\r\n   */\r\n  showUpdate = (category) => {\r\n    // 保存分类对象\r\n    this.category = category\r\n    // 更新状态\r\n    this.setState({\r\n      showStatus: 2\r\n    })\r\n  }\r\n\r\n  /*\r\n  更新分类\r\n   */\r\n  updateCategory = () => {\r\n    console.log('updateCategory()')\r\n    // 进行表单验证, 只有通过了才处理\r\n    this.form.validateFields(async (err, values) => {\r\n      if(!err) {\r\n        // 1. 隐藏确定框\r\n        this.setState({\r\n          showStatus: 0\r\n        })\r\n\r\n        // 准备数据\r\n        const categoryId = this.category._id\r\n        const {categoryName} = values\r\n        // 清除输入数据\r\n        this.form.resetFields()\r\n\r\n        // 2. 发请求更新分类\r\n        const result = await reqUpdateCategory({categoryId, categoryName})\r\n        if (result.status===0) {\r\n          // 3. 重新显示列表\r\n          this.getCategorys()\r\n        }\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n  /*\r\n  为第一次render()准备数据\r\n   */\r\n  componentWillMount () {\r\n    this.initColumns()\r\n  }\r\n\r\n  /*\r\n  执行异步任务: 发异步ajax请求\r\n   */\r\n  componentDidMount () {\r\n    // 获取一级分类列表显示\r\n    this.getCategorys()\r\n  }\r\n\r\n  render() {\r\n\r\n    // 读取状态数据\r\n    const {categorys, subCategorys, parentId, parentName, loading, showStatus} = this.state\r\n    // 读取指定的分类\r\n    const category = this.category || {} // 如果还没有指定一个空对象\r\n\r\n    // card的左侧\r\n    const title = parentId === '0' ? '一级分类列表' : (\r\n      <span>\r\n        <LinkButton onClick={this.showCategorys}>一级分类列表</LinkButton>\r\n        <Icon type='arrow-right' style={{marginRight: 5}}/>\r\n        <span>{parentName}</span>\r\n      </span>\r\n    )\r\n    // Card的右侧\r\n    const extra = (\r\n      <Button type='primary' onClick={this.showAdd}>\r\n        <Icon type='plus'/>\r\n        添加\r\n      </Button>\r\n    )\r\n\r\n    return (\r\n      <Card title={title} extra={extra}>\r\n        <Table\r\n          bordered\r\n          rowKey='_id'\r\n          loading={loading}\r\n          dataSource={parentId==='0' ? categorys : subCategorys}\r\n          columns={this.columns}\r\n          pagination={{defaultPageSize: 5, showQuickJumper: true}}\r\n        />\r\n\r\n        <Modal\r\n          title=\"添加分类\"\r\n          visible={showStatus===1}\r\n          onOk={this.addCategory}\r\n          onCancel={this.handleCancel}\r\n        >\r\n          <AddForm\r\n            categorys={categorys}\r\n            parentId={parentId}\r\n            setForm={(form,key) => {this.form = form}}\r\n          />\r\n        </Modal>\r\n\r\n        <Modal\r\n          title=\"更新分类\"\r\n          visible={showStatus===2}\r\n          onOk={this.updateCategory}\r\n          onCancel={this.handleCancel}\r\n        >\r\n          <UpdateForm\r\n            categoryName={category.name}\r\n            setForm={(form,key) => {this.form = form}}\r\n          />\r\n        </Modal>\r\n      </Card>\r\n    )\r\n  }\r\n}","/*\r\n包含一些常量值的模块\r\n */\r\nexport const PAGE_SIZE = 3 // 每页显示的记录数\r\nexport const BASE_IMG_URL = 'http://localhost:5000/upload/' // 上传图片的基础路径","import React, {Component} from 'react'\r\nimport {\r\n  Card,\r\n  Select,\r\n  Input,\r\n  Button,\r\n  Icon,\r\n  Table,\r\n  message\r\n} from 'antd'\r\n\r\nimport LinkButton from '../../components/link-button'\r\nimport {reqProducts, reqSearchProducts, reqUpdateStatus} from '../../api'\r\nimport {PAGE_SIZE} from '../../utils/constants'\r\n\r\nconst Option = Select.Option\r\n\r\n/*\r\nProduct的默认子路由组件\r\n */\r\nexport default class ProductHome extends Component {\r\n\r\n  state = {\r\n    total: 0, // 商品的总数量\r\n    products: [], // 商品的数组\r\n    loading: false, // 是否正在加载中\r\n    searchName: '', // 搜索的关键字\r\n    searchType: 'productName', // 根据哪个字段搜索\r\n  }\r\n\r\n  /*\r\n  初始化table的列的数组\r\n   */\r\n  initColumns = () => {\r\n    this.columns = [\r\n      {\r\n        title: '商品名称',\r\n        dataIndex: 'name',\r\n      },\r\n      {\r\n        title: '商品描述',\r\n        dataIndex: 'desc',\r\n      },\r\n      {\r\n        title: '价格',\r\n        dataIndex: 'price',\r\n        render: (price) => '¥' + price  // 当前指定了对应的属性, 传入的是对应的属性值\r\n      },\r\n      {\r\n        width: 100,\r\n        title: '状态',\r\n        // dataIndex: 'status',\r\n        render: (product) => {\r\n          const {status, _id} = product\r\n          const newStatus = status===1 ? 2 : 1\r\n          return (\r\n            <span>\r\n              <Button\r\n                type='primary'\r\n                onClick={() => this.updateStatus(_id, newStatus)}\r\n              >\r\n                {status===1 ? '下架' : '上架'}\r\n              </Button>\r\n              <span>{status===1 ? '在售' : '已下架'}</span>\r\n            </span>\r\n          )\r\n        }\r\n      },\r\n      {\r\n        width: 100,\r\n        title: '操作',\r\n        render: (product) => {\r\n          return (\r\n            <span>\r\n              {/*将product对象使用state传递给目标路由组件*/}\r\n              <LinkButton onClick={() => this.props.history.push('/product/detail', {product})}>详情</LinkButton>\r\n              <LinkButton onClick={() => this.props.history.push('/product/addupdate', product)}>修改</LinkButton>\r\n            </span>\r\n          )\r\n        }\r\n      },\r\n    ];\r\n  }\r\n\r\n  /*\r\n  获取指定页码的列表数据显示\r\n   */\r\n  getProducts = async (pageNum) => {\r\n    this.pageNum = pageNum // 保存pageNum, 让其它方法可以看到\r\n    this.setState({loading: true}) // 显示loading\r\n\r\n    const {searchName, searchType} = this.state\r\n    // 如果搜索关键字有值, 说明我们要做搜索分页\r\n    let result\r\n    if (searchName) {\r\n      result = await reqSearchProducts({pageNum, pageSize: PAGE_SIZE, searchName, searchType})\r\n    } else { // 一般分页请求\r\n      result = await reqProducts(pageNum, PAGE_SIZE)\r\n    }\r\n\r\n    this.setState({loading: false}) // 隐藏loading\r\n    if (result.status === 0) {\r\n      // 取出分页数据, 更新状态, 显示分页列表\r\n      const {total, list} = result.data\r\n      this.setState({\r\n        total,\r\n        products: list\r\n      })\r\n    }\r\n  }\r\n\r\n  /*\r\n  更新指定商品的状态\r\n   */\r\n  updateStatus = async (productId, status) => {\r\n    const result = await reqUpdateStatus(productId, status)\r\n    if(result.status===0) {\r\n      message.success('更新商品成功')\r\n      this.getProducts(this.pageNum)\r\n    }\r\n  }\r\n\r\n  componentWillMount () {\r\n    this.initColumns()\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.getProducts(1)\r\n  }\r\n\r\n  render() {\r\n\r\n    // 取出状态数据\r\n    const {products, total, loading, searchType, searchName} = this.state\r\n\r\n\r\n\r\n    const title = (\r\n      <span>\r\n        <Select\r\n          value= {searchType}\r\n          style={{width: 150}}\r\n          onChange={value => this.setState({searchType:value})}\r\n        >\r\n          <Option value='productName'>按名称搜索</Option>\r\n          <Option value='productDesc'>按描述搜索</Option>\r\n        </Select>\r\n        <Input\r\n          placeholder='关键字'\r\n          style={{width: 150, margin: '0 15px'}}\r\n          value={searchName}\r\n          onChange={event => this.setState({searchName:event.target.value})}\r\n        />\r\n        <Button type='primary' onClick={() => this.getProducts(1)}>搜索</Button>\r\n      </span>\r\n    )\r\n\r\n    const extra = (\r\n      <Button type='primary' onClick={() => this.props.history.push('/product/addupdate')}>\r\n        <Icon type='plus'/>\r\n        添加商品\r\n      </Button>\r\n    )\r\n\r\n    return (\r\n      <Card title={title} extra={extra}>\r\n        <Table\r\n          bordered\r\n          rowKey='_id'\r\n          loading={loading}\r\n          dataSource={products}\r\n          columns={this.columns}\r\n          pagination={{\r\n            current: this.pageNum,\r\n            total,\r\n            defaultPageSize: PAGE_SIZE,\r\n            showQuickJumper: true,\r\n            onChange: this.getProducts\r\n          }}\r\n        />\r\n      </Card>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Upload, Icon, Modal, message } from 'antd'\r\nimport {reqDeleteImg} from '../../api'\r\nimport {BASE_IMG_URL} from \"../../utils/constants\";\r\n/*\r\n用于图片上传的组件\r\n */\r\nexport default class PicturesWall extends React.Component {\r\n\r\n  static propTypes = {\r\n    imgs: PropTypes.array\r\n  }\r\n\r\n  state = {\r\n    previewVisible: false, // 标识是否显示大图预览Modal\r\n    previewImage: '', // 大图的url\r\n    fileList: [\r\n      /*{\r\n        uid: '-1', // 每个file都有自己唯一的id\r\n        name: 'xxx.png', // 图片文件名\r\n        status: 'done', // 图片状态: done-已上传, uploading: 正在上传中, removed: 已删除\r\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png', // 图片地址\r\n      },*/\r\n    ],\r\n  }\r\n\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    let fileList = []\r\n\r\n    // 如果传入了imgs属性\r\n    const {imgs} = this.props\r\n    if (imgs && imgs.length>0) {\r\n      fileList = imgs.map((img, index) => ({\r\n        uid: -index, // 每个file都有自己唯一的id\r\n        name: img, // 图片文件名\r\n        status: 'done', // 图片状态: done-已上传, uploading: 正在上传中, removed: 已删除\r\n        url: BASE_IMG_URL + img\r\n      }))\r\n    }\r\n\r\n    // 初始化状态\r\n    this.state = {\r\n      previewVisible: false, // 标识是否显示大图预览Modal\r\n      previewImage: '', // 大图的url\r\n      fileList // 所有已上传图片的数组\r\n    }\r\n  }\r\n\r\n  /*\r\n  获取所有已上传图片文件名的数组\r\n   */\r\n  getImgs  = () => {\r\n    return this.state.fileList.map(file => file.name)\r\n  }\r\n\r\n  /*\r\n  隐藏Modal\r\n   */\r\n  handleCancel = () => this.setState({ previewVisible: false });\r\n\r\n  handlePreview = file => {\r\n    console.log('handlePreview()', file)\r\n    // 显示指定file对应的大图\r\n    this.setState({\r\n      previewImage: file.url || file.thumbUrl,\r\n      previewVisible: true,\r\n    });\r\n  };\r\n\r\n  /*\r\n  file: 当前操作的图片文件(上传/删除)\r\n  fileList: 所有已上传图片文件对象的数组\r\n   */\r\n  handleChange = async ({ file, fileList }) => {\r\n    console.log('handleChange()', file.status, fileList.length, file===fileList[fileList.length-1])\r\n\r\n    // 一旦上传成功, 将当前上传的file的信息修正(name, url)\r\n    if(file.status==='done') {\r\n      const result = file.response  // {status: 0, data: {name: 'xxx.jpg', url: '图片地址'}}\r\n      if(result.status===0) {\r\n        message.success('上传图片成功!')\r\n        const {name, url} = result.data\r\n        file = fileList[fileList.length-1]\r\n        file.name = name\r\n        file.url = url\r\n      } else {\r\n        message.error('上传图片失败')\r\n      }\r\n    } else if (file.status==='removed') { // 删除图片\r\n      const result = await reqDeleteImg(file.name)\r\n      if (result.status===0) {\r\n        message.success('删除图片成功!')\r\n      } else {\r\n        message.error('删除图片失败!')\r\n      }\r\n    }\r\n\r\n    // 在操作(上传/删除)过程中更新fileList状态\r\n    this.setState({ fileList })\r\n  };\r\n\r\n  render() {\r\n    const { previewVisible, previewImage, fileList } = this.state;\r\n    const uploadButton = (\r\n      <div>\r\n        <Icon type=\"plus\" />\r\n        <div>Upload</div>\r\n      </div>\r\n    );\r\n    return (\r\n      <div>\r\n        <Upload\r\n          action=\"/manage/img/upload\" /*上传图片的接口地址*/\r\n          accept='image/*'  /*只接收图片格式*/\r\n          name='image' /*请求参数名,即为image文件*/\r\n          listType=\"picture-card\"  /*卡片样式*/\r\n          fileList={fileList}  /*所有已上传图片文件对象的数组*/\r\n          onPreview={this.handlePreview}\r\n          onChange={this.handleChange}\r\n        >\r\n          {fileList.length >= 4 ? null : uploadButton}\r\n        </Upload>\r\n\r\n        <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\r\n          <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}","/*\r\n用来指定商品详情的富文本编辑器组件\r\n */\r\nimport React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {EditorState, convertToRaw, ContentState} from 'draft-js'\r\nimport {Editor} from 'react-draft-wysiwyg'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport htmlToDraft from 'html-to-draftjs'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\n\r\n\r\nexport default class RichTextEditor extends Component {\r\n  \r\n  static propTypes = {\r\n    detail: PropTypes.string\r\n  }\r\n  \r\n  state = {\r\n    editorState: EditorState.createEmpty(), // 创建一个没有内容的编辑对象\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    const html = this.props.detail\r\n    if (html) { // 如果有值, 根据html格式字符串创建一个对应的编辑对象\r\n      const contentBlock = htmlToDraft(html)\r\n      const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks)\r\n      const editorState = EditorState.createWithContent(contentState)\r\n      this.state = {\r\n        editorState,\r\n      }\r\n    } else {\r\n      this.state = {\r\n        editorState: EditorState.createEmpty(), // 创建一个没有内容的编辑对象\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /*\r\n  输入过程中实时的回调\r\n   */\r\n  onEditorStateChange = (editorState) => {\r\n    console.log('onEditorStateChange()')\r\n    this.setState({\r\n      editorState,\r\n    })\r\n  }\r\n\r\n  getDetail = () => {\r\n    // 返回输入数据对应的html格式的文本\r\n    return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()))\r\n  }\r\n\r\n  uploadImageCallBack = (file) => {\r\n    return new Promise(\r\n      (resolve, reject) => {\r\n        const xhr = new XMLHttpRequest()\r\n        xhr.open('POST', '/manage/img/upload')\r\n        const data = new FormData()\r\n        data.append('image', file)\r\n        xhr.send(data)\r\n        xhr.addEventListener('load', () => {\r\n          const response = JSON.parse(xhr.responseText)\r\n          const url = response.data.url // 得到图片的url\r\n          resolve({data: {link: url}})\r\n        })\r\n        xhr.addEventListener('error', () => {\r\n          const error = JSON.parse(xhr.responseText)\r\n          reject(error)\r\n        })\r\n      }\r\n    )\r\n  }\r\n\r\n  render() {\r\n    const {editorState} = this.state\r\n    return (\r\n      <Editor\r\n        editorState={editorState}\r\n        editorStyle={{border: '1px solid black', minHeight: 200, paddingLeft: 10}}\r\n        onEditorStateChange={this.onEditorStateChange}\r\n        toolbar={{\r\n          image: { uploadCallback: this.uploadImageCallBack, alt: { present: true, mandatory: true } },\r\n        }}\r\n      />\r\n    )\r\n  }\r\n}","import React, {PureComponent} from 'react'\r\nimport {\r\n  Card,\r\n  Icon,\r\n  Form,\r\n  Input,\r\n  Cascader,\r\n  Button,\r\n  message\r\n} from 'antd'\r\n\r\nimport PicturesWall from './pictures-wall'\r\nimport RichTextEditor from './rich-text-editor'\r\nimport LinkButton from '../../components/link-button'\r\nimport {reqCategorys, reqAddOrUpdateProduct} from '../../api'\r\n\r\nconst {Item} = Form\r\nconst { TextArea } = Input\r\n\r\n/*\r\nProduct的添加和更新的子路由组件\r\n */\r\nclass ProductAddUpdate extends PureComponent {\r\n\r\n  state = {\r\n    options: [],\r\n  }\r\n\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    // 创建用来保存ref标识的标签对象的容器\r\n    this.pw = React.createRef()\r\n    this.editor = React.createRef()\r\n  }\r\n\r\n  initOptions = async (categorys) => {\r\n    // 根据categorys生成options数组\r\n    const options = categorys.map(c => ({\r\n      value: c._id,\r\n      label: c.name,\r\n      isLeaf: false, // 不是叶子\r\n    }))\r\n\r\n    // 如果是一个二级分类商品的更新\r\n    const {isUpdate, product} = this\r\n    const {pCategoryId} = product\r\n    if(isUpdate && pCategoryId!=='0') {\r\n      // 获取对应的二级分类列表\r\n      const subCategorys = await this.getCategorys(pCategoryId)\r\n      // 生成二级下拉列表的options\r\n      const childOptions = subCategorys.map(c => ({\r\n        value: c._id,\r\n        label: c.name,\r\n        isLeaf: true\r\n      }))\r\n\r\n      // 找到当前商品对应的一级option对象\r\n      const targetOption = options.find(option => option.value===pCategoryId)\r\n\r\n      // 关联对应的一级option上\r\n      targetOption.children = childOptions\r\n    }\r\n\r\n\r\n    // 更新options状态\r\n    this.setState({\r\n      options\r\n    })\r\n  }\r\n\r\n  /*\r\n  异步获取一级/二级分类列表, 并显示\r\n  async函数的返回值是一个新的promise对象, promise的结果和值由async的结果来决定\r\n   */\r\n  getCategorys = async (parentId) => {\r\n    const result = await reqCategorys(parentId)   // {status: 0, data: categorys}\r\n    if (result.status===0) {\r\n      const categorys = result.data\r\n      // 如果是一级分类列表\r\n      if (parentId==='0') {\r\n        this.initOptions(categorys)\r\n      } else { // 二级列表\r\n        return categorys  // 返回二级列表 ==> 当前async函数返回的promsie就会成功且value为categorys\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n  验证价格的自定义验证函数\r\n   */\r\n  validatePrice = (rule, value, callback) => {\r\n    console.log(value, typeof value)\r\n    if (value*1 > 0) {\r\n      callback() // 验证通过\r\n    } else {\r\n      callback('价格必须大于0') // 验证没通过\r\n    }\r\n  }\r\n\r\n  /*\r\n  用加载下一级列表的回调函数\r\n   */\r\n  loadData = async selectedOptions => {\r\n    // 得到选择的option对象\r\n    const targetOption = selectedOptions[0]\r\n    // 显示loading\r\n    targetOption.loading = true\r\n\r\n    // 根据选中的分类, 请求获取二级分类列表\r\n    const subCategorys = await this.getCategorys(targetOption.value)\r\n    // 隐藏loading\r\n    targetOption.loading = false\r\n    // 二级分类数组有数据\r\n    if (subCategorys && subCategorys.length>0) {\r\n      // 生成一个二级列表的options\r\n      const childOptions = subCategorys.map(c => ({\r\n        value: c._id,\r\n        label: c.name,\r\n        isLeaf: true\r\n      }))\r\n      // 关联到当前option上\r\n      targetOption.children = childOptions\r\n    } else { // 当前选中的分类没有二级分类\r\n      targetOption.isLeaf = true\r\n    }\r\n\r\n    // 更新options状态\r\n    this.setState({\r\n      options: [...this.state.options],\r\n    })\r\n  }\r\n\r\n  submit = () => {\r\n    // 进行表单验证, 如果通过了, 才发送请求\r\n    this.props.form.validateFields(async (error, values) => {\r\n      if (!error) {\r\n\r\n        // 1. 收集数据, 并封装成product对象\r\n        const {name, desc, price, categoryIds} = values\r\n        let pCategoryId, categoryId\r\n        if (categoryIds.length===1) {\r\n          pCategoryId = '0'\r\n          categoryId = categoryIds[0]\r\n        } else {\r\n          pCategoryId = categoryIds[0]\r\n          categoryId = categoryIds[1]\r\n        }\r\n        const imgs = this.pw.current.getImgs()\r\n        const detail = this.editor.current.getDetail()\r\n\r\n        const product = {name, desc, price, imgs, detail, pCategoryId, categoryId}\r\n\r\n        // 如果是更新, 需要添加_id\r\n        if(this.isUpdate) {\r\n          product._id = this.product._id\r\n        }\r\n\r\n        // 2. 调用接口请求函数去添加/更新\r\n        const result = await reqAddOrUpdateProduct(product)\r\n\r\n        // 3. 根据结果提示\r\n        if (result.status===0) {\r\n          message.success(`${this.isUpdate ? '更新' : '添加'}商品成功!`)\r\n          this.props.history.goBack()\r\n        } else {\r\n          message.error(`${this.isUpdate ? '更新' : '添加'}商品失败!`)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.getCategorys('0')\r\n  }\r\n\r\n  componentWillMount () {\r\n    // 取出携带的state\r\n    const product = this.props.location.state  // 如果是添加没值, 否则有值\r\n    // 保存是否是更新的标识\r\n    this.isUpdate = !!product\r\n    // 保存商品(如果没有, 保存是{})\r\n    this.product = product || {}\r\n  }\r\n\r\n  render() {\r\n\r\n    const {isUpdate, product} = this\r\n    const {pCategoryId, categoryId, imgs, detail} = product\r\n    // 用来接收级联分类ID的数组\r\n    const categoryIds = []\r\n    if(isUpdate) {\r\n      // 商品是一个一级分类的商品\r\n      if(pCategoryId==='0') {\r\n        categoryIds.push(categoryId)\r\n      } else {\r\n        // 商品是一个二级分类的商品\r\n        categoryIds.push(pCategoryId)\r\n        categoryIds.push(categoryId)\r\n      }\r\n    }\r\n\r\n    // 指定Item布局的配置对象\r\n    const formItemLayout = {\r\n      labelCol: { span: 2 },  // 左侧label的宽度\r\n      wrapperCol: { span: 8 }, // 右侧包裹的宽度\r\n    }\r\n\r\n    // 头部左侧标题\r\n    const title = (\r\n      <span>\r\n        <LinkButton onClick={() => this.props.history.goBack()}>\r\n          <Icon type='arrow-left' style={{fontSize: 20}}/>\r\n        </LinkButton>\r\n        <span>{isUpdate ? '修改商品' : '添加商品'}</span>\r\n      </span>\r\n    )\r\n\r\n    const {getFieldDecorator} = this.props.form\r\n\r\n    return (\r\n      <Card title={title}>\r\n        <Form {...formItemLayout}>\r\n          <Item label=\"商品名称\">\r\n            {\r\n              getFieldDecorator('name', {\r\n                initialValue: product.name,\r\n                rules: [\r\n                  {required: true, message: '必须输入商品名称'}\r\n                ]\r\n              })(<Input placeholder='请输入商品名称'/>)\r\n            }\r\n          </Item>\r\n          <Item label=\"商品描述\">\r\n            {\r\n              getFieldDecorator('desc', {\r\n                initialValue: product.desc,\r\n                rules: [\r\n                  {required: true, message: '必须输入商品描述'}\r\n                ]\r\n              })(<TextArea placeholder=\"请输入商品描述\" autosize={{ minRows: 2, maxRows: 6 }} />)\r\n            }\r\n\r\n          </Item>\r\n          <Item label=\"商品价格\">\r\n\r\n            {\r\n              getFieldDecorator('price', {\r\n                initialValue: product.price,\r\n                rules: [\r\n                  {required: true, message: '必须输入商品价格'},\r\n                  {validator: this.validatePrice}\r\n                ]\r\n              })(<Input type='number' placeholder='请输入商品价格' addonAfter='元'/>)\r\n            }\r\n          </Item>\r\n          <Item label=\"商品分类\">\r\n            {\r\n              getFieldDecorator('categoryIds', {\r\n                initialValue: categoryIds,\r\n                rules: [\r\n                  {required: true, message: '必须指定商品分类'},\r\n                ]\r\n              })(\r\n                <Cascader\r\n                  placeholder='请指定商品分类'\r\n                  options={this.state.options}  /*需要显示的列表数据数组*/\r\n                  loadData={this.loadData} /*当选择某个列表项, 加载下一级列表的监听回调*/\r\n                />\r\n              )\r\n            }\r\n\r\n          </Item>\r\n          <Item label=\"商品图片\">\r\n            <PicturesWall ref={this.pw} imgs={imgs}/>\r\n          </Item>\r\n          <Item label=\"商品详情\" labelCol={{span: 2}} wrapperCol={{span: 20}}>\r\n            <RichTextEditor ref={this.editor} detail={detail}/>\r\n          </Item>\r\n          <Item>\r\n            <Button type='primary' onClick={this.submit}>提交</Button>\r\n          </Item>\r\n        </Form>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form.create()(ProductAddUpdate)\r\n\r\n\r\n/*\r\n1. 子组件调用父组件的方法: 将父组件的方法以函数属性的形式传递给子组件, 子组件就可以调用\r\n2. 父组件调用子组件的方法: 在父组件中通过ref得到子组件标签对象(也就是组件对象), 调用其方法\r\n */\r\n\r\n/*\r\n使用ref\r\n1. 创建ref容器: thi.pw = React.createRef()\r\n2. 将ref容器交给需要获取的标签元素: <PictureWall ref={this.pw} />\r\n3. 通过ref容器读取标签元素: this.pw.current\r\n */","import React, {Component} from 'react'\r\nimport {\r\n  Card,\r\n  Icon,\r\n  List\r\n} from 'antd'\r\n\r\nimport LinkButton from '../../components/link-button'\r\nimport {BASE_IMG_URL} from '../../utils/constants'\r\nimport {reqCategory} from '../../api'\r\n\r\nconst Item = List.Item\r\n\r\n\r\n/*\r\nProduct的详情子路由组件\r\n */\r\nexport default class ProductDetail extends Component {\r\n\r\n  state = {\r\n    cName1: '', // 一级分类名称\r\n    cName2: '', // 二级分类名称\r\n  }\r\n\r\n  async componentDidMount () {\r\n\r\n    // 得到当前商品的分类ID\r\n    const {pCategoryId, categoryId} = this.props.location.state.product\r\n    if(pCategoryId==='0') { // 一级分类下的商品\r\n      const result = await reqCategory(categoryId)\r\n      const cName1 = result.data.name\r\n      this.setState({cName1})\r\n    } else { // 二级分类下的商品\r\n      /*\r\n      //通过多个await方式发多个请求: 后面一个请求是在前一个请求成功返回之后才发送\r\n      const result1 = await reqCategory(pCategoryId) // 获取一级分类列表\r\n      const result2 = await reqCategory(categoryId) // 获取二级分类\r\n      const cName1 = result1.data.name\r\n      const cName2 = result2.data.name\r\n      */\r\n\r\n      // 一次性发送多个请求, 只有都成功了, 才正常处理\r\n      const results = await Promise.all([reqCategory(pCategoryId), reqCategory(categoryId)])\r\n      const cName1 = results[0].data.name\r\n      const cName2 = results[1].data.name\r\n      this.setState({\r\n        cName1,\r\n        cName2\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    // 读取携带过来的state数据，并解构\r\n    const {name, desc, price, detail, imgs} = this.props.location.state.product\r\n    const {cName1, cName2} = this.state\r\n\r\n    const title = (\r\n      <span>\r\n        <LinkButton>\r\n          <Icon\r\n            type='arrow-left'\r\n            style={{marginRight: 10, fontSize: 20}}\r\n            onClick={() => this.props.history.goBack()}//回掉函数\r\n          />\r\n        </LinkButton>\r\n\r\n        <span>商品详情</span>\r\n      </span>\r\n    )\r\n    return (\r\n      <Card title={title} className='product-detail'>\r\n        <List>\r\n          <Item>\r\n            <span className=\"left\">商品名称:</span>\r\n            <span>{name}</span>\r\n          </Item>\r\n          <Item>\r\n            <span className=\"left\">商品描述:</span>\r\n            <span>{desc}</span>\r\n          </Item>\r\n          <Item>\r\n            <span className=\"left\">商品价格:</span>\r\n            <span>{price}元</span>\r\n          </Item>\r\n          <Item>\r\n            <span className=\"left\">所属分类:</span>\r\n            <span>{cName1} {cName2 ? ' --> '+cName2 : ''}</span>\r\n          </Item>\r\n          <Item>\r\n            <span className=\"left\">商品图片:</span>\r\n            <span>\r\n              {\r\n                imgs.map(img => (\r\n                  <img\r\n                    key={img}\r\n                    src={BASE_IMG_URL + img}\r\n                    className=\"product-img\"\r\n                    alt=\"img\"\r\n                  />\r\n                ))\r\n              }\r\n            </span>\r\n          </Item>\r\n          <Item>\r\n            <span className=\"left\">商品详情:</span>\r\n            <span dangerouslySetInnerHTML={{__html: detail}}>\r\n            </span>\r\n          </Item>\r\n\r\n        </List>\r\n      </Card>\r\n    )\r\n  }\r\n}","import React, {Component} from 'react'\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\n\r\nimport ProductHome from './home'\r\nimport ProductAddUpdate from './add-update'\r\nimport ProductDetail from './detail'\r\n\r\nimport './product.less'\r\n\r\n/*\r\n商品路由\r\n */\r\nexport default class Product extends Component {\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route path='/product' component={ProductHome} exact/> {/*路径完全匹配*/}\r\n        <Route path='/product/addupdate' component={ProductAddUpdate}/>\r\n        <Route path='/product/detail' component={ProductDetail}/>\r\n        <Redirect to='/product'/>\r\n      </Switch>\r\n    )\r\n  }\r\n}","import React, {Component} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Form,\r\n  Input\r\n} from 'antd'\r\n\r\nconst Item = Form.Item\r\n\r\n/*\r\n添加分类的form组件\r\n */\r\nclass AddForm extends Component {\r\n\r\n  static propTypes = {\r\n    setForm: PropTypes.func.isRequired, // 用来传递form对象的函数\r\n  }\r\n\r\n  componentWillMount () {\r\n    this.props.setForm(this.props.form)\r\n  }\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form\r\n    // 指定Item布局的配置对象\r\n    const formItemLayout = {\r\n      labelCol: { span: 4 },  // 左侧label的宽度\r\n      wrapperCol: { span: 15 }, // 右侧包裹的宽度\r\n    }\r\n\r\n    return (\r\n      <Form>\r\n        <Item label='角色名称' {...formItemLayout}>\r\n          {\r\n            getFieldDecorator('roleName', {\r\n              initialValue: '',\r\n              rules: [\r\n                {required: true, message: '角色名称必须输入'}\r\n              ]\r\n            })(\r\n              <Input placeholder='请输入角色名称'/>\r\n            )\r\n          }\r\n        </Item>\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form.create()(AddForm)","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Form,\r\n  Input,\r\n  Tree\r\n} from 'antd'\r\nimport menuList from '../../config/menuConfig'\r\n\r\nconst Item = Form.Item\r\n\r\nconst { TreeNode } = Tree;\r\n\r\n/*\r\n添加分类的form组件\r\n */\r\nexport default class AuthForm extends PureComponent {\r\n\r\n  static propTypes = {\r\n    role: PropTypes.object\r\n  }\r\n\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    // 根据传入角色的menus生成初始状态\r\n    const {menus} = this.props.role\r\n    this.state = {\r\n      checkedKeys: menus\r\n    }\r\n  }\r\n\r\n  /*\r\n  为父组件提交获取最新menus数据的方法\r\n   */\r\n  getMenus = () => this.state.checkedKeys\r\n\r\n\r\n  getTreeNodes = (menuList) => {\r\n    return menuList.reduce((pre, item) => {\r\n      pre.push(\r\n        <TreeNode title={item.title} key={item.key}>\r\n          {item.children ? this.getTreeNodes(item.children) : null}\r\n        </TreeNode>\r\n      )\r\n      return pre\r\n    }, [])\r\n  }\r\n\r\n  // 选中某个node时的回调\r\n  onCheck = checkedKeys => {\r\n    console.log('onCheck', checkedKeys);\r\n    this.setState({ checkedKeys });\r\n  };\r\n\r\n\r\n  componentWillMount () {\r\n    this.treeNodes = this.getTreeNodes(menuList)\r\n  }\r\n\r\n  // 根据新传入的role来更新checkedKeys状态\r\n  /*\r\n  当组件接收到新的属性时自动调用\r\n   */\r\n  componentWillReceiveProps (nextProps) {\r\n    console.log('componentWillReceiveProps()', nextProps)\r\n    const menus = nextProps.role.menus\r\n    this.setState({\r\n      checkedKeys: menus\r\n    })\r\n    // this.state.checkedKeys = menus\r\n  }\r\n\r\n  render() {\r\n    console.log('AuthForm render()')\r\n    const {role} = this.props\r\n    const {checkedKeys} = this.state\r\n    // 指定Item布局的配置对象\r\n    const formItemLayout = {\r\n      labelCol: { span: 4 },  // 左侧label的宽度\r\n      wrapperCol: { span: 15 }, // 右侧包裹的宽度\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Item label='角色名称' {...formItemLayout}>\r\n          <Input value={role.name} disabled/>\r\n        </Item>\r\n\r\n        <Tree\r\n          checkable\r\n          defaultExpandAll={true}\r\n          checkedKeys={checkedKeys}\r\n          onCheck={this.onCheck}\r\n        >\r\n          <TreeNode title=\"平台权限\" key=\"all\">\r\n            {this.treeNodes}\r\n          </TreeNode>\r\n        </Tree>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, {Component} from 'react'\r\nimport {\r\n  Card,\r\n  Button,\r\n  Table,\r\n  Modal,\r\n  message\r\n} from 'antd'\r\nimport {PAGE_SIZE} from \"../../utils/constants\"\r\nimport {reqRoles, reqAddRole, reqUpdateRole} from '../../api'\r\nimport AddForm from './add-form'\r\nimport AuthForm from './auth-form'\r\nimport memoryUtils from \"../../utils/memoryUtils\"\r\nimport {formateDate} from '../../utils/dateUtils'\r\nimport storageUtils from \"../../utils/storageUtils\";\r\n\r\n/*\r\n角色路由\r\n */\r\nexport default class Role extends Component {\r\n\r\n  state = {\r\n    roles: [], // 所有角色的列表\r\n    role: {}, // 选中的role\r\n    isShowAdd: false, // 是否显示添加界面\r\n    isShowAuth: false, // 是否显示设置权限界面\r\n  }\r\n\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.auth = React.createRef()\r\n  }\r\n\r\n  initColumn = () => {\r\n    this.columns = [\r\n      {\r\n        title: '角色名称',\r\n        dataIndex: 'name'\r\n      },\r\n      {\r\n        title: '创建时间',\r\n        dataIndex: 'create_time',\r\n        render: (create_time) => formateDate(create_time)\r\n      },\r\n      {\r\n        title: '授权时间',\r\n        dataIndex: 'auth_time',\r\n        render: formateDate\r\n      },\r\n      {\r\n        title: '授权人',\r\n        dataIndex: 'auth_name'\r\n      },\r\n    ]\r\n  }\r\n\r\n  getRoles = async () => {\r\n    const result = await reqRoles()\r\n    if (result.status===0) {\r\n      const roles = result.data\r\n      this.setState({\r\n        roles\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  onRow = (role) => {\r\n    return {\r\n      onClick: event => { // 点击行\r\n        console.log('row onClick()', role)\r\n        // alert('点击行')\r\n        this.setState({\r\n          role\r\n        })\r\n      },\r\n    }\r\n  }\r\n\r\n  /*\r\n  添加角色\r\n   */\r\n  addRole = () => {\r\n    // 进行表单验证, 只能通过了才向下处理\r\n    this.form.validateFields(async (error, values) => {\r\n      if (!error) {\r\n\r\n        // 隐藏确认框\r\n        this.setState({\r\n          isShowAdd: false\r\n        })\r\n\r\n        // 收集输入数据\r\n        const {roleName} = values\r\n        this.form.resetFields()\r\n\r\n        // 请求添加\r\n        const result = await reqAddRole(roleName)\r\n        // 根据结果提示/更新列表显示\r\n        if (result.status===0) {\r\n          message.success('添加角色成功')\r\n          // this.getRoles()\r\n          // 新产生的角色\r\n          const role = result.data\r\n          // 更新roles状态\r\n          /*const roles = this.state.roles\r\n          roles.push(role)\r\n          this.setState({\r\n            roles\r\n          })*/\r\n\r\n          // 更新roles状态: 基于原本状态数据更新\r\n          this.setState(state => ({\r\n            roles: [...state.roles, role]\r\n          }))\r\n\r\n        } else {\r\n          message.success('添加角色失败')\r\n        }\r\n\r\n      }\r\n    })\r\n\r\n\r\n  }\r\n\r\n  /*\r\n  更新角色\r\n   */\r\n  updateRole = async () => {\r\n\r\n    // 隐藏确认框\r\n    this.setState({\r\n      isShowAuth: false\r\n    })\r\n\r\n    const role = this.state.role\r\n    // 得到最新的menus\r\n    const menus = this.auth.current.getMenus()\r\n    role.menus = menus\r\n    role.auth_time = Date.now()\r\n    role.auth_name = memoryUtils.user.username\r\n\r\n    // 请求更新\r\n    const result = await reqUpdateRole(role)\r\n    if (result.status===0) {\r\n      // this.getRoles()\r\n      // 如果当前更新的是自己角色的权限, 强制退出\r\n      if (role._id === memoryUtils.user.role_id) {\r\n        memoryUtils.user = {}\r\n        storageUtils.removeUser()\r\n        this.props.history.replace('/login')\r\n        message.success('当前用户角色权限成功')\r\n      } else {\r\n        message.success('设置角色权限成功')\r\n        this.setState({\r\n          roles: [...this.state.roles]\r\n        })\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  componentWillMount () {\r\n    this.initColumn()\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.getRoles()\r\n  }\r\n\r\n  render() {\r\n\r\n    const {roles, role, isShowAdd, isShowAuth} = this.state\r\n\r\n    const title = (\r\n      <span>\r\n        <Button type='primary' onClick={() => this.setState({isShowAdd: true})}>创建角色</Button> &nbsp;&nbsp;\r\n        <Button type='primary' disabled={!role._id} onClick={() => this.setState({isShowAuth: true})}>设置角色权限</Button>\r\n      </span>\r\n    )\r\n\r\n    return (\r\n      <Card title={title}>\r\n        <Table\r\n          bordered\r\n          rowKey='_id'\r\n          dataSource={roles}\r\n          columns={this.columns}\r\n          pagination={{defaultPageSize: PAGE_SIZE}}\r\n          rowSelection={{\r\n            type: 'radio',\r\n            selectedRowKeys: [role._id],\r\n            onSelect: (role) => { // 选择某个radio时回调\r\n              this.setState({\r\n                role\r\n              })\r\n            }\r\n\r\n          }}\r\n          onRow={this.onRow}\r\n        />\r\n\r\n        <Modal\r\n          title=\"添加角色\"\r\n          visible={isShowAdd}\r\n          onOk={this.addRole}\r\n          onCancel={() => {\r\n            this.setState({isShowAdd: false})\r\n            this.form.resetFields()\r\n          }}\r\n        >\r\n          <AddForm\r\n            setForm={(form) => this.form = form}\r\n          />\r\n        </Modal>\r\n\r\n        <Modal\r\n          title=\"设置角色权限\"\r\n          visible={isShowAuth}\r\n          onOk={this.updateRole}\r\n          onCancel={() => {\r\n            this.setState({isShowAuth: false})\r\n          }}\r\n        >\r\n          <AuthForm ref={this.auth} role={role}/>\r\n        </Modal>\r\n      </Card>\r\n    )\r\n  }\r\n}","import React, {PureComponent} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Form,\r\n  Select,\r\n  Input\r\n} from 'antd'\r\n\r\nconst Item = Form.Item\r\nconst Option = Select.Option\r\n\r\n/*\r\n添加/修改用户的form组件\r\n */\r\nclass UserForm extends PureComponent {\r\n\r\n  static propTypes = {\r\n    setForm: PropTypes.func.isRequired, // 用来传递form对象的函数\r\n    roles: PropTypes.array.isRequired,\r\n    user: PropTypes.object\r\n  }\r\n\r\n  componentWillMount () {\r\n    this.props.setForm(this.props.form)\r\n  }\r\n\r\n  render() {\r\n\r\n    const {roles, user} = this.props\r\n    const { getFieldDecorator } = this.props.form\r\n    // 指定Item布局的配置对象\r\n    const formItemLayout = {\r\n      labelCol: { span: 4 },  // 左侧label的宽度\r\n      wrapperCol: { span: 15 }, // 右侧包裹的宽度\r\n    }\r\n\r\n    return (\r\n      <Form {...formItemLayout}>\r\n        <Item label='用户名'>\r\n          {\r\n            getFieldDecorator('username', {\r\n              initialValue: user.username,\r\n            })(\r\n              <Input placeholder='请输入用户名'/>\r\n            )\r\n          }\r\n        </Item>\r\n\r\n        {\r\n          user._id ? null : (\r\n            <Item label='密码'>\r\n              {\r\n                getFieldDecorator('password', {\r\n                  initialValue: user.password,\r\n                })(\r\n                  <Input type='password' placeholder='请输入密码'/>\r\n                )\r\n              }\r\n            </Item>\r\n          )\r\n        }\r\n\r\n        <Item label='手机号'>\r\n          {\r\n            getFieldDecorator('phone', {\r\n              initialValue: user.phone,\r\n            })(\r\n              <Input placeholder='请输入手机号'/>\r\n            )\r\n          }\r\n        </Item>\r\n        <Item label='邮箱'>\r\n          {\r\n            getFieldDecorator('email', {\r\n              initialValue: user.email,\r\n            })(\r\n              <Input placeholder='请输入邮箱'/>\r\n            )\r\n          }\r\n        </Item>\r\n\r\n        <Item label='角色'>\r\n          {\r\n            getFieldDecorator('role_id', {\r\n              initialValue: user.role_id,\r\n            })(\r\n              <Select>\r\n                {\r\n                  roles.map(role => <Option key={role._id} value={role._id}>{role.name}</Option>)\r\n                }\r\n              </Select>\r\n            )\r\n          }\r\n        </Item>\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Form.create()(UserForm)","import React, {Component} from 'react'\r\nimport {\r\n  Card,\r\n  Button,\r\n  Table,\r\n  Modal,\r\n  message\r\n} from 'antd'\r\nimport {formateDate} from \"../../utils/dateUtils\"\r\nimport LinkButton from \"../../components/link-button/index\"\r\nimport {reqDeleteUser, reqUsers, reqAddOrUpdateUser} from \"../../api/index\";\r\nimport UserForm from './user-form'\r\n\r\n/*\r\n用户路由\r\n */\r\nexport default class User extends Component {\r\n\r\n  state = {\r\n    users: [], // 所有用户列表\r\n    roles: [], // 所有角色列表\r\n    isShow: false, // 是否显示确认框\r\n  }\r\n\r\n  initColumns = () => {\r\n    this.columns = [\r\n      {\r\n        title: '用户名',\r\n        dataIndex: 'username'\r\n      },\r\n      {\r\n        title: '邮箱',\r\n        dataIndex: 'email'\r\n      },\r\n\r\n      {\r\n        title: '电话',\r\n        dataIndex: 'phone'\r\n      },\r\n      {\r\n        title: '注册时间',\r\n        dataIndex: 'create_time',\r\n        render: formateDate\r\n      },\r\n      {\r\n        title: '所属角色',\r\n        dataIndex: 'role_id',\r\n        render: (role_id) => this.roleNames[role_id]\r\n      },\r\n      {\r\n        title: '操作',\r\n        render: (user) => (\r\n          <span>\r\n            <LinkButton onClick={() => this.showUpdate(user)}>修改</LinkButton>\r\n            <LinkButton onClick={() => this.deleteUser(user)}>删除</LinkButton>\r\n          </span>\r\n        )\r\n      },\r\n    ]\r\n  }\r\n\r\n  /*\r\n  根据role的数组, 生成包含所有角色名的对象(属性名用角色id值)\r\n   */\r\n  initRoleNames = (roles) => {\r\n    const roleNames = roles.reduce((pre, role) => {\r\n      pre[role._id] = role.name\r\n      return pre\r\n    }, {})\r\n    // 保存\r\n    this.roleNames = roleNames\r\n  }\r\n\r\n  /*\r\n  显示添加界面\r\n   */\r\n  showAdd = () => {\r\n    this.user = null // 去除前面保存的user\r\n    this.setState({isShow: true})\r\n  }\r\n\r\n  /*\r\n  显示修改界面\r\n   */\r\n  showUpdate = (user) => {\r\n    this.user = user // 保存user\r\n    this.setState({\r\n      isShow: true\r\n    })\r\n  }\r\n\r\n  /*\r\n  删除指定用户\r\n   */\r\n  deleteUser = (user) => {\r\n    Modal.confirm({\r\n      title: `确认删除${user.username}吗?`,\r\n      onOk: async () => {\r\n        const result = await reqDeleteUser(user._id)\r\n        if(result.status===0) {\r\n          message.success('删除用户成功!')\r\n          this.getUsers()\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /*\r\n  添加/更新用户\r\n   */\r\n  addOrUpdateUser = async () => {\r\n\r\n    this.setState({isShow: false})\r\n\r\n    // 1. 收集输入数据\r\n    const user = this.form.getFieldsValue()\r\n    this.form.resetFields()\r\n    // 如果是更新, 需要给user指定_id属性\r\n    if (this.user) {\r\n      user._id = this.user._id\r\n    }\r\n\r\n    // 2. 提交添加的请求\r\n    const result = await reqAddOrUpdateUser(user)\r\n    // 3. 更新列表显示\r\n    if(result.status===0) {\r\n      message.success(`${this.user ? '修改' : '添加'}用户成功`)\r\n      this.getUsers()\r\n    }\r\n  }\r\n\r\n  getUsers = async () => {\r\n    const result = await reqUsers()\r\n    if (result.status===0) {\r\n      const {users, roles} = result.data\r\n      this.initRoleNames(roles)\r\n      this.setState({\r\n        users,\r\n        roles\r\n      })\r\n    }\r\n  }\r\n\r\n  componentWillMount () {\r\n    this.initColumns()\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.getUsers()\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    const {users, roles, isShow} = this.state\r\n    const user = this.user || {}\r\n\r\n    const title = <Button type='primary' onClick={this.showAdd}>创建用户</Button>\r\n\r\n    return (\r\n      <Card title={title}>\r\n        <Table\r\n          bordered\r\n          rowKey='_id'\r\n          dataSource={users}\r\n          columns={this.columns}\r\n          pagination={{defaultPageSize: 2}}\r\n        />\r\n\r\n        <Modal\r\n          title={user._id ? '修改用户' : '添加用户'}\r\n          visible={isShow}\r\n          onOk={this.addOrUpdateUser}\r\n          onCancel={() => {\r\n            this.form.resetFields()\r\n            this.setState({isShow: false})\r\n          }}\r\n        >\r\n          <UserForm\r\n            setForm={form => this.form = form}\r\n            roles={roles}\r\n            user={user}\r\n          />\r\n        </Modal>\r\n\r\n      </Card>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\n/*\r\n柱状图\r\n*/\r\nexport default class Bar extends Component {\r\nrender(){   \r\n  return (\r\n   <span>Bar</span>\r\n  )\r\n}\r\n}\r\n","import React, { Component } from 'react';\r\n/*\r\n折线图\r\n*/\r\nexport default class Line extends Component {\r\nrender(){   \r\n  return (\r\n   <span>Line</span>\r\n  )\r\n}\r\n}\r\n","import React, { Component } from 'react';\r\n/*\r\n饼状图\r\n*/\r\nexport default class Pie extends Component {\r\nrender(){   \r\n  return (\r\n   <span>Pie</span>\r\n  )\r\n}\r\n}\r\n","import React, {Component} from 'react'\r\nimport {Button, Row, Col} from 'antd'\r\nimport './not-found.less'\r\n/*\r\n前台404页面\r\n */\r\nexport default class NotFound extends Component {\r\n  render() {\r\n    return (\r\n\r\n      <Row className='not-found'>\r\n        <Col span={12} className='left'></Col>\r\n        <Col span={12} className='right'>\r\n          <h1>404</h1>\r\n          <h2>抱歉，你访问的页面不存在</h2>\r\n          <div>\r\n            <Button type='primary' onClick={() => this.props.history.replace('/home')}>\r\n              回到首页\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    )\r\n  }\r\n}","import React from 'react'\r\nimport './order.less'\r\n\r\n/*\r\nHome路由组件\r\n */\r\nexport default function Order(props) {\r\n  return (\r\n    <div className=\"order\">\r\n      订单管理模块学生实战开发中...\r\n    </div>\r\n  )\r\n}","import React, {Component} from 'react'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport { Layout } from 'antd'\r\n\r\nimport memoryUtils from '../../utils/memoryUtils'\r\nimport LeftNav from '../../components/left-nav'\r\nimport Header from '../../components/header'\r\nimport Home from '../home/home'\r\nimport Category from '../category/category'\r\nimport Product from '../product/product'\r\nimport Role from '../role/role'\r\nimport User from '../user/user'\r\nimport Bar from '../charts/bar'\r\nimport Line from '../charts/line'\r\nimport Pie from '../charts/pie'\r\nimport NotFound from '../not-found/not-found'\r\nimport Order from '../order/order'\r\n\r\n\r\nconst { Footer, Sider, Content } = Layout\r\n\r\n/*\r\n后台管理的路由组件\r\n */\r\nexport default class Admin extends Component {\r\n  render () {\r\n    const user = memoryUtils.user\r\n    // 如果内存没有存储user ==> 当前没有登陆\r\n    if(!user || !user._id) {\r\n      // 自动跳转到登陆(在render()中)\r\n      return <Redirect to='/login'/>\r\n    }\r\n    return (\r\n      <Layout style={{minHeight: '100%'}}>\r\n        <Sider>\r\n          <LeftNav/>\r\n        </Sider>\r\n        <Layout>\r\n          <Header>Header</Header>\r\n          <Content style={{margin: 20, backgroundColor: '#fff'}}>\r\n            <Switch>\r\n              <Redirect from='/' exact to='/home'/>\r\n              <Route path='/home' component={Home}/>\r\n              <Route path='/category' component={Category}/>\r\n              <Route path='/product' component={Product}/>\r\n              <Route path='/user' component={User}/>\r\n              <Route path='/role' component={Role}/>\r\n              <Route path=\"/charts/bar\" component={Bar}/>\r\n              <Route path=\"/charts/pie\" component={Pie}/>\r\n              <Route path=\"/charts/line\" component={Line}/>\r\n              <Route path=\"/order\" component={Order}/>\r\n              <Route component={NotFound}/>\r\n            </Switch>\r\n          </Content>\r\n          <Footer style={{textAlign: 'center', color: '#cccccc'}}>推荐使用谷歌浏览器，可以获得更佳页面操作体验</Footer>\r\n        </Layout>\r\n      </Layout>\r\n    )\r\n  }\r\n}","import  React, { Component } from 'react';\r\n\r\n\r\nimport {BrowserRouter,Route,Switch} from 'react-router-dom'\r\nimport Login from './pages/login/login'\r\nimport Admin from './pages/admin/admin'\r\n\r\n\r\nexport default class App extends Component {\r\nrender(){   \r\n  return (\r\n   <BrowserRouter>\r\n    <Switch>  {/*只运行看到一个路由*/}\r\n       <Route path='/login' component={Login}></Route>\r\n       <Route path='/' component={Admin}></Route>\r\n     </Switch>\r\n   </BrowserRouter>\r\n  )\r\n}\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport memoryUtils from './utils/memoryUtils'\r\nimport storageUtils from './utils/storageUtils'\r\n\r\n\r\n// 单项目加载的时候就读取local 中保存user ,保存到内存中\r\nconst user = storageUtils.getUser()\r\nmemoryUtils.user = user\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}